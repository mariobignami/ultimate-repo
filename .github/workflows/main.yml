# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build_test:
    name: Build & Test App
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          
      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
          npm ci 
      # build and test the apps     
      - name: build & test
        run: |
          npm run build
          npm run test
          
  push_to_Docker_Hub:
      name: Push Images to DockerHub
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      # build docker image and push to docker hub
      # only if the app build and test successfully
      needs: [build_test]

      steps:
        - name: checkout repo
          uses: actions/checkout@v4

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
      
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/ultimate-app:prod-version

        - name: Run the image in a container
          uses: addnab/docker-run-action@v3
          with:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/ultimate-app:prod-version
            run: |
              echo "runing the docker image"
              echo "Testing the nodejs  app endpoints"
              echo ${{ steps.docker_build.outputs.digest }}
  
  deploy_to_heroku:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    # only run this after deploying to docker
    needs: [push_to_Docker_Hub]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      # more info on deploy to heroku: 
      # https://github.com/marketplace/actions/deploy-to-heroku
      - name: deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          # build the app docker image using the Dockerfile
          # and run that image in a container that's pushed to heroku
          usedocker: true
      - name: Print App URL
        run: |
          echo "App URL: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"


  deploy_to_google_cloud:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    # only deploy to GPC if and after deploying to Heroku successed
    needs: [push_to_Docker_Hub]
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - name: setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.5.0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          # this is the json key of the service account created on the project
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}  
          export_default_credentials: true

      # Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      # Deploy the app using kubernetes (deploy.yml)
      - name: Deploy
        # To run kubectl commands against a cluster created in Cloud Console, 
        # from another computer, or by another member of the project, 
        # you need to generate a kubeconfig entry in your environment...
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT }}
          gcloud config set compute/zone us-central1-c
          gcloud container clusters get-credentials node-demo-k8s
          kubectl apply -f deploy.yml
          envsubst < deploy.yml
          envsubst < deploy.yml | kubectl apply -f -
          kubectl rollout status -w deployment/nodejs-demo-app
          kubectl get all
      - name: Print App URL
        run: |
          echo "App URL: $(kubectl get service nodejs-demo-app-entrypoint -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"

  deploy_to_app_engine:
    name: Deploy to GCP App Engine
    runs-on: ubuntu-latest
    needs: [push_to_Docker_Hub]
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.5.0
        with:
          project_id: ultimate-app-gcp
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Deploy to App Engine
        run: |
          gcloud config set project ultimate-app-gcp
          gcloud app deploy app.yaml
      - name: Print App URL
        run: |
          echo "App URL: $(gcloud app browse --format='value(url)')"

  deploy_to_azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [push_to_Docker_Hub]
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Web App
        run: |
          az group create --name myResourceGroup --location "East Us"
          az appservice plan create --name myAppServicePlan --resource-group myResourceGroup --sku B1 --is-linux
          az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name ${{ secrets.AZURE_APP_NAME }} --deployment-container-image-name ${{ secrets.DOCKERHUB_USERNAME }}/ultimate-app:prod-version

      - name: Deploy to Azure
        run: |
          az webapp config container set --name ${{ secrets.AZURE_APP_NAME }} --resource-group myResourceGroup --docker-custom-image-name ${{ secrets.DOCKERHUB_USERNAME }}/ultimate-app:prod-version --docker-registry-server-url https://index.docker.io/v
      - name: Print App URL
        run: |
          echo "App URL: https://${{ secrets.AZURE_APP_NAME }}.azurewebsites.net"    